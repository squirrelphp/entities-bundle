<?php
// phpcs:ignoreFile -- created by SquirrelPHP entities library, do not alter
/*
 * THIS FILE IS AUTOMATICALLY CREATED - DO NOT EDIT, DO NOT COMMIT TO VCS
 *
 * IF YOU DELETE THE ENTITY (Squirrel\EntitiesBundle\Tests\TestEntities\User)
 * THEN PLEASE DELETE THIS FILE - IT WILL NO LONGER BE NEEDED
 *
 * Generated by Squirrel\Entities\Generate\RepositoriesGenerateCommand,
 * this file will be overwritten when that command is executed again, if your
 * entity still exists at that time
 */
// @codeCoverageIgnoreStart

namespace Squirrel\Entities\Builder\SquirrelEntitiesBundleTestsTestEntitiesUser {
    /**
     * @implements \Iterator<int,\Squirrel\EntitiesBundle\Tests\TestEntities\User>
     */
    class SelectIterator extends \Squirrel\Entities\Builder\SelectIterator
    {
        public function current(): \Squirrel\EntitiesBundle\Tests\TestEntities\User
        {
            $entry = parent::current();

            if ($entry instanceof \Squirrel\EntitiesBundle\Tests\TestEntities\User) {
                return $entry;
            }

            throw new \LogicException('Unexpected type encountered - wrong repository might be configured: ' . \get_class($entry));
        }
    }

    /**
     * This class exists to have proper type hints about the object(s) returned in the
     * getEntries and getOneEntry functions. The heavy lifting is done by the
     * SelectEntries class
     *
     * @implements \IteratorAggregate<int,\Squirrel\EntitiesBundle\Tests\TestEntities\User>
     */
    class SelectEntries extends \Squirrel\Entities\Builder\SelectEntries
    {
        /**
         * @return \Squirrel\EntitiesBundle\Tests\TestEntities\User[]
         */
        public function getAllEntries(): array
        {
            /** @var \Squirrel\EntitiesBundle\Tests\TestEntities\User[] $entries */
            $entries = parent::getAllEntries();

            foreach ($entries as $entry) {
                if (!($entry instanceof \Squirrel\EntitiesBundle\Tests\TestEntities\User)) {
                    throw new \LogicException('Unexpected type encountered - wrong repository might be configured: ' . \get_class($entry));
                }
            }

            return $entries;
        }

        public function getOneEntry(): ?\Squirrel\EntitiesBundle\Tests\TestEntities\User
        {
            $entry = parent::getOneEntry();

            if ($entry instanceof \Squirrel\EntitiesBundle\Tests\TestEntities\User || $entry === null) {
                return $entry;
            }

            throw new \LogicException('Unexpected type encountered - wrong repository might be configured: ' . \get_class($entry));
        }

        public function getIterator(): SelectIterator
        {
            return new SelectIterator($this->repository, [
                'where' => $this->where,
                'order' => $this->orderBy,
                'fields' => $this->fields,
                'limit' => $this->limitTo,
                'offset' => $this->startAt,
                'lock' => $this->blocking,
            ]);
        }
    }
}

namespace Squirrel\EntitiesBundle\Tests\TestEntities {
    use Squirrel\Entities\RepositoryBuilderReadOnlyInterface;
    use Squirrel\Entities\RepositoryReadOnlyInterface;

    class UserRepositoryReadOnly implements RepositoryBuilderReadOnlyInterface
    {
        public function __construct(private RepositoryReadOnlyInterface $repository)
        {
        }

        public function count(): \Squirrel\Entities\Builder\CountEntries
        {
            return new \Squirrel\Entities\Builder\CountEntries($this->repository);
        }

        public function select(): \Squirrel\Entities\Builder\SquirrelEntitiesBundleTestsTestEntitiesUser\SelectEntries
        {
            return new \Squirrel\Entities\Builder\SquirrelEntitiesBundleTestsTestEntitiesUser\SelectEntries($this->repository);
        }
    }
}
// @codeCoverageIgnoreEnd
