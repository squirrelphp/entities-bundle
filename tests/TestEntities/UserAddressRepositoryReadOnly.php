<?php
// phpcs:ignoreFile -- created by SquirrelPHP library, do not alter
/*
 * THIS FILE IS AUTOMATICALLY CREATED - DO NOT EDIT, DO NOT COMMIT TO VCS
 *
 * IF YOU DELETE THE ENTITY (Squirrel\EntitiesBundle\Tests\TestEntities\UserAddress)
 * THEN PLEASE DELETE THIS FILE - IT WILL NO LONGER BE NEEDED
 *
 * Generated by Squirrel\Entities\Generate\RepositoriesGenerateCommand,
 * this file will be overwritten when that command is executed again, if your
 * entity still exists at that time
 */
// @codeCoverageIgnoreStart

namespace Squirrel\EntitiesBundle\Tests\TestEntities {
    use Squirrel\Entities\RepositoryBuilderReadOnlyInterface;
    use Squirrel\Entities\RepositoryReadOnlyInterface;
  
    class UserAddressRepositoryReadOnly implements RepositoryBuilderReadOnlyInterface
    {
        /**
         * @var RepositoryReadOnlyInterface
         */
        private $repository;
        
        public function __construct(RepositoryReadOnlyInterface $repository)
        {
            $this->repository = $repository;
        }
        
        public function count(): \Squirrel\Entities\Action\CountEntries
        {
            return new \Squirrel\Entities\Action\CountEntries($this->repository);
        }
      
        public function select(): \Squirrel\Entities\Action\SquirrelEntitiesBundleTestsTestEntitiesUserAddress\SelectEntries
        {
            return new \Squirrel\Entities\Action\SquirrelEntitiesBundleTestsTestEntitiesUserAddress\SelectEntries($this->repository);
        }
    }
}

namespace Squirrel\Entities\Action\SquirrelEntitiesBundleTestsTestEntitiesUserAddress {
    /*
     * This class exists to have proper type hints about the object(s) returned in the
     * getEntries and getOneEntry functions. All calls are delegated to the
     * SelectEntries class - because of the builder pattern we cannot extend SelectEntries
     * (because then returning self would return that class instead of this extended class)
     * so we instead imitate it. This way the implementation in SelectEntries can change
     * and this generated class has no ties to how it "works" or how the repository is used.
     */
    class SelectEntries implements \Squirrel\Entities\Action\ActionInterface, \IteratorAggregate
    {
        /**
         * @var \Squirrel\Entities\Action\SelectEntries
         */
        private $selectImplementation;
      
        public function __construct(\Squirrel\Entities\RepositoryReadOnlyInterface $repository)
        {
            $this->selectImplementation = new \Squirrel\Entities\Action\SelectEntries($repository);
        }
        
        public function field(string $onlyGetThisField): self
        {
            $this->selectImplementation->field($onlyGetThisField);
            return $this;
        }
      
        public function fields(array $onlyGetTheseFields): self
        {
            $this->selectImplementation->fields($onlyGetTheseFields);
            return $this;
        }
        
        public function where(array $whereClauses): self
        {
            $this->selectImplementation->where($whereClauses);
            return $this;
        }
      
        /**
         * @param array|string $orderByClauses
         * @return SelectEntries
         */
        public function orderBy($orderByClauses): self
        {
            $this->selectImplementation->orderBy($orderByClauses);
            return $this;
        }
      
        public function startAt(int $startAtNumber): self
        {
            $this->selectImplementation->startAt($startAtNumber);
            return $this;
        }
      
        public function limitTo(int $numberOfEntries): self
        {
            $this->selectImplementation->limitTo($numberOfEntries);
            return $this;
        }
      
        public function blocking(bool $active = true): self
        {
            $this->selectImplementation->blocking($active);
            return $this;
        }
        
        /**
         * @return \Squirrel\EntitiesBundle\Tests\TestEntities\UserAddress[]
         */
        public function getAllEntries(): array
        {
            return $this->selectImplementation->getAllEntries();
        }
        
        public function getOneEntry(): ?\Squirrel\EntitiesBundle\Tests\TestEntities\UserAddress
        {
            return $this->selectImplementation->getOneEntry();
        }
        
        /**
         * @return string[]|int[]|float[]|bool[]|null[]
         */
        public function getFlattenedFields(): array
        {
            return $this->selectImplementation->getFlattenedFields();
        }
        
        public function getIterator(): SelectIterator
        {
            return new SelectIterator($this->selectImplementation->getIterator());
        }
    }
    
    class SelectIterator implements \Squirrel\Entities\Action\ActionInterface, \Iterator
    {
        /**
         * \Squirrel\Entities\Action\SelectIterator
         */
        private $iteratorInstance;
    
        public function __construct(\Squirrel\Entities\Action\SelectIterator $iterator)
        {
            $this->iteratorInstance = $iterator;
        }
    
        /**
         * @return \Squirrel\EntitiesBundle\Tests\TestEntities\UserAddress|null
         */
        public function current()
        {
            return $this->iteratorInstance->current();
        }
    
        public function next()
        {
            $this->iteratorInstance->next();
        }
    
        /**
         * @return int
         */
        public function key()
        {
            return $this->iteratorInstance->key();
        }
    
        /**
         * @return bool
         */
        public function valid()
        {
            return $this->iteratorInstance->valid();
        }
    
        public function rewind()
        {
            $this->iteratorInstance->rewind();
        }
    
        public function clear()
        {
            $this->iteratorInstance->clear();
        }
    }
}
// @codeCoverageIgnoreEnd
